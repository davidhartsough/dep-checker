{"version":3,"sources":["dep-checker.js","App.js","index.js"],"names":["isDepListingLine","line","test","expandDepStructure","inputDepStructure","libraries","Object","keys","outputDepStructure","entries","forEach","recursiveAdd","lib","deps","dep","includes","push","index","indexOf","depsToAdd","filter","dependency","length","processDepsInText","text","depListings","Error","split","map","replace","trim","getDepListingsFromText","depList","definedLibraries","substring","Set","size","validateDepListingsAreUnique","depData","depStructure","words","libraryName","dependencies","slice","createDepStructureFromDepListings","input","join","output","App","useState","setInput","setOutput","error","setError","textInput","setTextInput","loading","setLoading","fileInput","useRef","reset","handleText","data","message","className","href","target","rel","onSubmit","event","preventDefault","file","current","files","Promise","resolve","reject","then","catch","reader","FileReader","onload","result","onerror","readAsText","parseFile","type","accept","ref","disabled","wrap","value","placeholder","onChange","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5f4d58b.chunk.js","sourcesContent":["/**\n * Tests a line of text to see if it is a valid definition of a library dependency listing.\n * @example\n * // returns true\n * isDepListingLine(\"A depends on B\");\n * @param {string} line - a line from the initial text input\n * @returns {boolean}\n */\nfunction isDepListingLine(line) {\n  const linePattern = /^[A-Za-z_$@][A-Za-z0-9@$_-]* depends on [A-Za-z_$@][A-Za-z0-9@$ _-]*$/;\n  return linePattern.test(line);\n}\n\n/**\n * Retrieves the lines of the given text which are a dependency listing.\n * @example\n * // returns [\"A depends on B\", \"B depends on C D\"]\n * getDepListingsFromText(\"A depends on B\\nB depends on C D\\nOther line\");\n * @param {string} text - The full input text data as a string.\n * @returns {string[]} An array of strings, each being a single line defining a library's dependencies.\n * @throws {Error} Throws Error objects if the input text has no listings or isn't formatted correctly.\n */\nfunction getDepListingsFromText(text) {\n  if (!text.includes(\" depends on \")) {\n    throw Error(\"Invalid input: No dependencies listed.\");\n  }\n  const depListings = text\n    .split(/\\r?\\n/)\n    .map((line) => line.replace(/\\s+/g, \" \").trim())\n    .filter(isDepListingLine);\n  if (depListings.length < 1) {\n    throw Error(\"Invalid input: Please check the dependency list formatting.\");\n  }\n  return depListings;\n}\n\n/**\n * Checks the names of the primary libraries defined for any duplicate listings.\n * @example\n * validateDepListingsAreUnique([\"A depends on B\", \"B depends on C D\"]);\n * @param {string[]} depList - An array of strings that are each a library dependency listing.\n * @throws {Error} Throws a generic Error object if a library is defined twice.\n */\nfunction validateDepListingsAreUnique(depList) {\n  const definedLibraries = depList.map((line) =>\n    line.substring(0, line.indexOf(\" \"))\n  );\n  if (new Set(definedLibraries).size !== definedLibraries.length) {\n    throw Error(\n      \"Invalid dependency data: There is a duplicate library dependency listing.\"\n    );\n  }\n}\n\n/**\n * Breaks down a list of dependency listings into a structured object.\n * @example\n * // returns { \"A\": [\"B\"], \"B\": [\"C\", \"D\"] }\n * createDepStructureFromDepListings([\"A depends on B\", \"B depends on C D\"]);\n * @param {string[]} depListings - Each item in the array must be a library dependency listing.\n * @returns {Object.<string, string[]>} Dependency data structured as: {\"lib\": [\"dep\",\"dep\"]}\n * @throws {Error} Throws a generic Error object if a library depends on itself.\n */\nfunction createDepStructureFromDepListings(depListings) {\n  const depStructure = {};\n  depListings.forEach((line) => {\n    const words = line.split(\" \");\n    const libraryName = words[0];\n    const dependencies = [...new Set(words.slice(3))];\n    if (dependencies.includes(libraryName)) {\n      throw Error(\n        \"Invalid dependency data: A library directly depends on itself.\"\n      );\n    }\n    depStructure[libraryName] = dependencies;\n  });\n  return depStructure;\n}\n\n/**\n * Generates the fully expanded dependency structure for all libraries listed in\n * the given input dependency data structure.\n * @example\n * // returns { \"A\": [\"B\", \"C\", \"D\"], \"B\": [\"C\", \"D\"] }\n * expandDepStructure({ \"A\": [\"B\"], \"B\": [\"C\", \"D\"] });\n * @param {Object.<string, string[]>} inputDepStructure - The input dependency data structure\n * @returns {Object.<string, string[]>} The fully expanded dependency structure\n */\nfunction expandDepStructure(inputDepStructure) {\n  const libraries = Object.keys(inputDepStructure);\n  const outputDepStructure = inputDepStructure;\n  // Adds the dependencies to the library's dependency list,\n  // and recursively grabs the dependencies of those dependencies.\n  function recursiveAdd(lib, deps) {\n    deps.forEach((dep) => {\n      // Ignore a cyclical dependency.\n      if (dep === lib) return;\n      if (!outputDepStructure[lib].includes(dep)) {\n        outputDepStructure[lib].push(dep);\n      }\n      // See if the dependency has its own dependency list.\n      const index = libraries.indexOf(dep);\n      if (index >= 0) {\n        // Get the dep's dependency list and filter to only the ones that haven't been added yet.\n        const depsToAdd = inputDepStructure[libraries[index]].filter(\n          (dependency) => !outputDepStructure[lib].includes(dependency)\n        );\n        // Repeat this process unless all the dependencies have already been added.\n        if (depsToAdd.length > 0) {\n          recursiveAdd(lib, depsToAdd);\n        }\n      }\n    });\n  }\n  Object.entries(inputDepStructure).forEach(([lib, deps]) => {\n    recursiveAdd(lib, deps);\n  });\n  return outputDepStructure;\n}\n\n/**\n * Converts a given dependency data structure into a formatted multiline string.\n * @example\n * // returns \"A depends on B C D\\nB depends on C D\"\n * depStructureToString({ \"A\": [\"B\", \"C\", \"D\"], \"B\": [\"C\", \"D\"] });\n * @param {Object.<string, string[]>} depData - Dependency data structured as: {\"lib\": [\"dep\",\"dep\"]}\n * @returns {string} The formatted multiline string outlining the libraries and their dependencies.\n */\nfunction depStructureToString(depData) {\n  return Object.entries(depData)\n    .map(([lib, deps]) => `${lib} depends on ${deps.join(\" \")}`)\n    .join(\"\\n\");\n}\n\n/**\n * @typedef ResponseData\n * @type {Object}\n * @property {string} input - A multiline string of only the dependency listings from input text.\n * @property {string} output - A multiline string of the fully expanded dependency listings.\n */\n/**\n * Given a multiline string input, parses the text input, gets the library dependency listings,\n * and returns a data response object that contains both the parsed input dependency listings\n * and the calculated output as a fully expanded library dependency graph formatted to a string.\n * @example\n * // returns { input: \"A depends on B\\nB depends on C\", output: \"A depends on B C\\nB depends on C\" }\n * processDepsInText(\"A depends on B\\nB depends on C\\nOther line\");\n * @param {string} text - The submitted text input as a string.\n * @returns {ResponseData} A ResponseData package that defines the input and output.\n * @throws {Error} Throws generic Error objects if the input is invalid.\n */\nexport function processDepsInText(text) {\n  const depListings = getDepListingsFromText(text);\n  validateDepListingsAreUnique(depListings);\n  const inputDepStructure = createDepStructureFromDepListings(depListings);\n  const outputDepStructure = expandDepStructure(inputDepStructure);\n  return {\n    input: depListings.join(\"\\n\"),\n    output: depStructureToString(outputDepStructure),\n  };\n}\n","import React, { useState, useRef } from \"react\";\nimport { processDepsInText } from \"./dep-checker\";\nimport \"./App.css\";\n\n/**\n * Parses the text of a file and returns it.\n * @param {Blob} file - A submitted text file (.txt)\n * @returns {Promise<string>} Resolves with the parsed string. Rejects with an error message string.\n */\nfunction parseFile(file) {\n  return new Promise(function (resolve, reject) {\n    // Try to use the latest Blob.text() web API method.\n    if (typeof file.text === \"function\") {\n      return file.text().then(resolve).catch(reject);\n    }\n    // Fallback on FileReader if the browser doesn't support the newer method.\n    const reader = new FileReader();\n    reader.onload = ({ target }) => resolve(target.result);\n    reader.onerror = () => reject(reader.error.message);\n    reader.readAsText(file);\n  });\n}\n\nexport default function App() {\n  const [input, setInput] = useState(null);\n  const [output, setOutput] = useState(null);\n  const [error, setError] = useState(null);\n  const [textInput, setTextInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const fileInput = useRef(null);\n  const handleChange = ({ target }) => setTextInput(target.value);\n  function reset() {\n    setInput(null);\n    setOutput(null);\n    setError(null);\n  }\n  function handleText(text) {\n    try {\n      const data = processDepsInText(text);\n      setInput(data.input);\n      setOutput(data.output);\n    } catch ({ message }) {\n      setError(message);\n    }\n  }\n  function onFileSubmit(event) {\n    event.preventDefault();\n    reset();\n    const file = fileInput.current.files[0];\n    if (!file) return setError(\"Whoops. Please upload a text file.\");\n    setLoading(true);\n    parseFile(file)\n      .then((text) => {\n        handleText(text);\n        setLoading(false);\n      })\n      .catch(() => {\n        setError(\"There was an error parsing the file.\");\n        setLoading(false);\n      });\n  }\n  function onTextSubmit() {\n    reset();\n    if (textInput.length < 14) {\n      return setError(\n        \"Please enter at least one dependency listing in the text area field.\"\n      );\n    }\n    handleText(textInput);\n  }\n  return (\n    <>\n      <header>\n        <h1>dep-checker</h1>\n        <h2>library dependency analysis</h2>\n      </header>\n      <div className=\"sections\">\n        <section>\n          <h3>Introduction</h3>\n          <p>\n            Given a text input, this program will list all of the libraries\n            involved and their dependencies.\n          </p>\n          <div className=\"examples\">\n            <div className=\"example\">\n              <p>For example, if an input text file reads:</p>\n              <pre>\n                {`X depends on Y R\nY depends on Z`}\n              </pre>\n            </div>\n            <div className=\"example\">\n              <p>Then the expected output would be:</p>\n              <pre>\n                {`X depends on Y R Z\nY depends on Z`}\n              </pre>\n            </div>\n          </div>\n          <p>\n            Each line must follow this format. Any library or dependency must be\n            alphanumeric but can contain the symbols: <code>$</code>,{\" \"}\n            <code>@</code>, <code>_</code>, or <code>-</code>. Also, library\n            names cannot begin with a number.\n          </p>\n          <ul>\n            <li>\n              <a href=\"./input.txt\" target=\"_blank\">\n                View the sample text file\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"https://github.com/davidhartsough/dep-checker\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                View the source code on GitHub\n              </a>\n            </li>\n          </ul>\n        </section>\n        <section>\n          <h3>Test it out</h3>\n          <div className=\"forms\">\n            <form onSubmit={onFileSubmit} className=\"form\">\n              <fieldset>\n                <legend>Upload a text file</legend>\n                <div className=\"file-upload-wrapper\">\n                  <input\n                    type=\"file\"\n                    accept=\".txt\"\n                    ref={fileInput}\n                    size=\"40\"\n                    className=\"file-upload\"\n                  />\n                </div>\n                <button type=\"submit\" disabled={loading}>\n                  Submit\n                </button>\n              </fieldset>\n            </form>\n            <p className=\"divider\">Or</p>\n            <div className=\"form\">\n              <fieldset>\n                <legend>Enter library dependencies</legend>\n                <textarea\n                  wrap=\"hard\"\n                  value={textInput}\n                  placeholder={`A depends on B C\nB depends on C E\nC depends on G\nD depends on A F\nE depends on F\nF depends on H`}\n                  onChange={handleChange}\n                />\n                <button onClick={onTextSubmit}>Submit</button>\n              </fieldset>\n            </div>\n          </div>\n        </section>\n      </div>\n      <footer>\n        {loading ? (\n          <div className=\"loader\" />\n        ) : (\n          <>\n            {input && (\n              <section>\n                <h3>Input</h3>\n                <pre>{input}</pre>\n              </section>\n            )}\n            {output && (\n              <section>\n                <h3>Output</h3>\n                <pre>{output}</pre>\n              </section>\n            )}\n            {error && (\n              <section>\n                <p className=\"error\">{error}</p>\n              </section>\n            )}\n          </>\n        )}\n      </footer>\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./normalize.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// serviceWorker.register();\n"],"sourceRoot":""}