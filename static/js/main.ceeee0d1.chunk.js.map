{"version":3,"sources":["dep-checker.js","App.js","index.js"],"names":["getFullDepGraph","inputDepData","libraries","libs","Object","keys","outputDepData","entries","forEach","recursiveAdd","lib","deps","dep","includes","push","index","indexOf","depsToAdd","filter","dependency","length","checkDependencies","depList","depData","map","line","substring","Set","size","Error","getLibsFromDepList","words","split","slice","getDepDataFromDepList","join","linePattern","getFullDepDataFromText","text","list","test","getDepListFromText","output","input","handleFile","file","Promise","resolve","reject","then","catch","reader","FileReader","onload","target","result","onerror","error","message","readAsText","parseFile","data","App","useState","setInput","setOutput","setError","textInput","setTextInput","loading","setLoading","fileInput","useRef","reset","handleResolve","handleReject","className","href","rel","onSubmit","event","preventDefault","current","files","type","accept","ref","wrap","value","placeholder","onChange","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ceeee0d1.chunk.js","sourcesContent":["/**\n * Gets the names of the primary libraries defined with an array of dependencies in a dependency list.\n * @param {string[]} depList - An array of strings that are each a library dependency listing.\n * @returns {string[]} An array of library names.\n * @throws {Error} Throws a generic Error object if a library is defined twice.\n */\nfunction getLibsFromDepList(depList) {\n  // Get the names of the primary libraries by pulling the first \"word\" from each line in the list.\n  const libs = depList.map((line) => line.substring(0, line.indexOf(\" \")));\n  // Check for duplicate library listings.\n  if (new Set(libs).size !== libs.length) {\n    throw Error(\n      \"Invalid dependency data: There is a duplicate library dependency listing.\"\n    );\n  }\n  return libs;\n}\n\n/**\n * Breaks down a list of dependency listings into a structured object.\n * @param {string[]} depList - An array of strings that are each a library dependency listing.\n * @returns {Object.<string, string[]>} Dependency data structured as: {\"lib\": [\"dep\",\"dep\"]}\n * @throws {Error} Throws a generic Error object if a library depends on itself.\n */\nfunction getDepDataFromDepList(depList) {\n  const depData = {};\n  depList.forEach((line) => {\n    const words = line.split(\" \");\n    // Remove potential duplicates.\n    depData[words[0]] = [...new Set(words.slice(3))];\n    // Check for a cyclical dependency.\n    if (depData[words[0]].includes(words[0])) {\n      throw Error(\"Invalid dependency data: A library depends on itself.\");\n    }\n  });\n  return depData;\n}\n\n/**\n * Given an initial input dependency listing, calculate the complete dependency graph for all libraries.\n * @param {Object.<string, string[]>} inputDepData - Dependency data structured as {\"lib\": [\"dep\",\"dep\"]}\n * @param {string[]} [libraries] - An array of library names\n * @returns {Object.<string, string[]>} Complete dependency graph structured as: {\"lib\": [\"dep\", \"dep\"]}\n */\nfunction getFullDepGraph(inputDepData, libraries) {\n  const libs = libraries || Object.keys(inputDepData);\n  // Start with the given dependency data as a base.\n  const outputDepData = inputDepData;\n  // Adds the dependencies to the library's list,\n  // and recursively grabs dependencies of those dependencies.\n  function recursiveAdd(lib, deps) {\n    deps.forEach((dep) => {\n      // Ignore a cyclical dependency.\n      if (dep === lib) return;\n      // Add the dependencies only if it has not already been added.\n      if (!outputDepData[lib].includes(dep)) {\n        outputDepData[lib].push(dep);\n      }\n      // See if the dependency has its own dependency list.\n      const index = libs.indexOf(dep);\n      if (index >= 0) {\n        // If so, pull its dependency list,\n        // and filter to only the ones that haven't been added yet.\n        const depsToAdd = inputDepData[libs[index]].filter(\n          (dependency) => !outputDepData[lib].includes(dependency)\n        );\n        // Repeat this process unless all the dependencies have already been added.\n        if (depsToAdd.length > 0) {\n          recursiveAdd(lib, depsToAdd);\n        }\n      }\n    });\n  }\n  Object.entries(inputDepData).forEach(([lib, deps]) => {\n    recursiveAdd(lib, deps);\n  });\n  return outputDepData;\n}\n\n/**\n * Converts a given dependency data structure into a formatted multiline string.\n * @param {Object.<string, string[]>} depData - Dependency data structured as: {\"lib\": [\"dep\",\"dep\"]}\n * @returns {string} The formatted multiline string outlining the libraries and their dependencies.\n * Each line is formatted as: \"lib depends on dep dep dep\"\n */\nfunction depDataToString(depData) {\n  return Object.entries(depData)\n    .map(([lib, deps]) => `${lib} depends on ${deps.join(\" \")}`)\n    .join(\"\\n\");\n}\n\n/**\n * Given a multiline string input, checks for a list of formatted library dependencies,\n * and returns an outline of all of the libraries and their complete dependency list.\n * @param {string[]} depList - An array of strings that are each a library dependency listing.\n * @returns {string} The full, formatted dependency list as a multiline string.\n * @throws {Error} Throws generic Error objects if the dependency data is invalid.\n */\nfunction checkDependencies(depList) {\n  const libs = getLibsFromDepList(depList);\n  const inputDepData = getDepDataFromDepList(depList);\n  const outputDepData = getFullDepGraph(inputDepData, libs);\n  return depDataToString(outputDepData);\n}\n\n// RegEx pattern for a single line defining a library and its dependencies.\nconst linePattern = /^[A-Za-z_$@][A-Za-z0-9@$_-]* depends on [A-Za-z_$@][A-Za-z0-9@$ _-]*$/;\n\n/**\n * Retrieves the lines of the given text which are a dependency listing.\n * @param {string} text - The full input text data as a string.\n * @returns {string[]} An array of strings, each being a single line defining a library's dependencies.\n * @throws {Error} Throws Error objects if the input text has no listings or isn't formatted correctly.\n */\nfunction getDepListFromText(text) {\n  // Check to see if there are any dependencies listed at all.\n  if (!text.includes(\" depends on \")) {\n    throw Error(\"Invalid input: No dependencies listed.\");\n  }\n  // Get only the lines with a dependency listing.\n  const list = text.split(/\\r?\\n/).filter((line) => linePattern.test(line));\n  // If nothing matched the RegEx, then the input has invalid formatting.\n  if (list.length < 1) {\n    throw Error(\"Invalid input: Please check the dependency list formatting.\");\n  }\n  return list;\n}\n\n/**\n * @typedef Response\n * @type {Object}\n * @property {string} input - A multiline string of only the dependency listings from the text file.\n * @property {string} output - The resulting dependency list.\n */\n/**\n * Parses the text input, checks the input's dependency list, and returns a data response object\n * containing both the parsed input dependency list and the calculated output as a complete\n * library dependency graph formatted to a multiline string.\n * @param {string} text - Submitted text input as a string\n * @returns {Response} Returns a Response object\n * @throws {Error} Throws generic Error objects if the input is invalid.\n */\nexport function getFullDepDataFromText(text) {\n  const list = getDepListFromText(text);\n  const output = checkDependencies(list);\n  return { input: list.join(\"\\n\"), output };\n}\n\n/**\n * Parses the text of a file and returns it.\n * @param {Blob} file - A submitted text file (.txt)\n * @returns {Promise<string>} Resolves with the parsed string. Rejects with an error message string.\n */\nfunction parseFile(file) {\n  return new Promise(function (resolve, reject) {\n    // Try to use the latest Blob.text() web API method.\n    if (typeof file.text === \"function\") {\n      return file.text().then(resolve).catch(reject);\n    }\n    // Fallback on FileReader if the browser doesn't support the newer method.\n    const reader = new FileReader();\n    reader.onload = ({ target }) => resolve(target.result);\n    reader.onerror = () => reject(reader.error.message);\n    reader.readAsText(file);\n  });\n}\n\n/**\n * Parses a submitted text file (.txt), checks the input's dependency list,\n * and returns a data response containing both the parsed input dependency list\n * and the output as a complete library dependency graph as a multiline string.\n * @param {Blob} file - A submitted text file (.txt)\n * @returns {Promise<Response|string>} Resolves with a Response object,\n * or rejects with an error message string.\n */\nexport function handleFile(file) {\n  return new Promise(function (resolve, reject) {\n    parseFile(file)\n      .then((text) => {\n        try {\n          const data = getFullDepDataFromText(text);\n          resolve(data);\n        } catch ({ message }) {\n          reject(message);\n        }\n      })\n      .catch(reject);\n  });\n}\n","import React, { useState, useRef } from \"react\";\nimport { handleFile, getFullDepDataFromText } from \"./dep-checker\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [input, setInput] = useState(null);\n  const [output, setOutput] = useState(null);\n  const [error, setError] = useState(null);\n  const [textInput, setTextInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const fileInput = useRef(null);\n  const handleChange = ({ target }) => setTextInput(target.value);\n  function reset() {\n    setInput(null);\n    setOutput(null);\n    setError(null);\n    setLoading(true);\n  }\n  function handleResolve(data) {\n    setInput(data.input);\n    setOutput(data.output);\n    setLoading(false);\n  }\n  function handleReject(error) {\n    setError(error);\n    setLoading(false);\n  }\n  function onFileSubmit(event) {\n    event.preventDefault();\n    reset();\n    const file = fileInput.current.files[0];\n    handleFile(file).then(handleResolve).catch(handleReject);\n  }\n  function onTextSubmit() {\n    reset();\n    try {\n      const data = getFullDepDataFromText(textInput);\n      handleResolve(data);\n    } catch ({ message }) {\n      handleReject(message);\n    }\n  }\n  return (\n    <>\n      <header>\n        <h1>dep-checker</h1>\n        <h2>library dependency analysis</h2>\n      </header>\n      <div className=\"sections\">\n        <section>\n          <h3>Introduction</h3>\n          <p>\n            Given a text input, this program will list all of the libraries\n            involved and their dependencies.\n          </p>\n          <div className=\"examples\">\n            <div className=\"example\">\n              <p>For example, if an input text files reads:</p>\n              <pre>\n                {`X depends on Y R\nY depends on Z`}\n              </pre>\n            </div>\n            <div className=\"example\">\n              <p>Then the expected output would be:</p>\n              <pre>\n                {`X depends on Y R Z\nY depends on Z`}\n              </pre>\n            </div>\n          </div>\n          <p>\n            Each line must follow this format. Any library or dependency must be\n            alphanumeric but can contain the symbols: <code>$</code>,{\" \"}\n            <code>@</code>, <code>_</code>, or <code>-</code>.\n          </p>\n          <ul>\n            <li>\n              <a href=\"./input.txt\" target=\"_blank\">\n                View the sample text file\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"https://github.com/davidhartsough/dep-checker\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                View the source code on GitHub\n              </a>\n            </li>\n          </ul>\n        </section>\n        <section>\n          <h3>Test it out</h3>\n          <div className=\"forms\">\n            <form onSubmit={onFileSubmit} className=\"form\">\n              <fieldset>\n                <legend>Upload a text file</legend>\n                <div className=\"file-upload-wrapper\">\n                  <input\n                    type=\"file\"\n                    accept=\".txt\"\n                    ref={fileInput}\n                    size=\"40\"\n                    className=\"file-upload\"\n                  />\n                </div>\n                <button type=\"submit\">Submit</button>\n              </fieldset>\n            </form>\n            <p className=\"divider\">Or</p>\n            <div className=\"form\">\n              <fieldset>\n                <legend>Enter library dependencies</legend>\n                <textarea\n                  wrap=\"hard\"\n                  value={textInput}\n                  placeholder={`A depends on B C\nB depends on C E\nC depends on G\nD depends on A F\nE depends on F\nF depends on H`}\n                  onChange={handleChange}\n                />\n                <button onClick={onTextSubmit}>Submit</button>\n              </fieldset>\n            </div>\n          </div>\n        </section>\n      </div>\n      <footer>\n        {loading ? (\n          <div className=\"loader\" />\n        ) : (\n          <>\n            {input && (\n              <section>\n                <h3>Input</h3>\n                <pre>{input}</pre>\n              </section>\n            )}\n            {output && (\n              <section>\n                <h3>Output</h3>\n                <pre>{output}</pre>\n              </section>\n            )}\n            {error && (\n              <section>\n                <p className=\"error\">{error}</p>\n              </section>\n            )}\n          </>\n        )}\n      </footer>\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./normalize.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// serviceWorker.register();\n"],"sourceRoot":""}